#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'camera'
require 'security_camera_types'

module SecurityCamera
  class Client < ::Camera::Client 
    include ::Thrift::Client

    def rotate(rotate)
      send_rotate(rotate)
      return recv_rotate()
    end

    def send_rotate(rotate)
      send_message('rotate', Rotate_args, :rotate => rotate)
    end

    def recv_rotate()
      result = receive_message(Rotate_result)
      return result.success unless result.success.nil?
      raise result.ouch unless result.ouch.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'rotate failed: unknown result')
    end

    def zoom(zoom)
      send_zoom(zoom)
      return recv_zoom()
    end

    def send_zoom(zoom)
      send_message('zoom', Zoom_args, :zoom => zoom)
    end

    def recv_zoom()
      result = receive_message(Zoom_result)
      return result.success unless result.success.nil?
      raise result.ouch unless result.ouch.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'zoom failed: unknown result')
    end

  end

  class Processor < ::Camera::Processor 
    include ::Thrift::Processor

    def process_rotate(seqid, iprot, oprot)
      args = read_args(iprot, Rotate_args)
      result = Rotate_result.new()
      begin
        result.success = @handler.rotate(args.rotate)
      rescue ::RotateException => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'rotate', seqid)
    end

    def process_zoom(seqid, iprot, oprot)
      args = read_args(iprot, Zoom_args)
      result = Zoom_result.new()
      begin
        result.success = @handler.zoom(args.zoom)
      rescue ::ZoomException => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'zoom', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Rotate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROTATE = -1

    FIELDS = {
      ROTATE => {:type => ::Thrift::Types::I32, :name => 'rotate', :enum_class => ::Rotate}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @rotate.nil? || ::Rotate::VALID_VALUES.include?(@rotate)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field rotate!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Rotate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OUCH = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::RotateException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Zoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ZOOM = -1

    FIELDS = {
      ZOOM => {:type => ::Thrift::Types::I32, :name => 'zoom', :enum_class => ::Zoom}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @zoom.nil? || ::Zoom::VALID_VALUES.include?(@zoom)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field zoom!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Zoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OUCH = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::ZoomException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

