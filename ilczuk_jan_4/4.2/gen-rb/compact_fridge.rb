#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'fridge'
require 'compact_fridge_types'

module CompactFridge
  class Client < ::Fridge::Client 
    include ::Thrift::Client

    def setColor(color)
      send_setColor(color)
      recv_setColor()
    end

    def send_setColor(color)
      send_message('setColor', SetColor_args, :color => color)
    end

    def recv_setColor()
      result = receive_message(SetColor_result)
      raise result.ouch unless result.ouch.nil?
      return
    end

    def getColor()
      send_getColor()
      return recv_getColor()
    end

    def send_getColor()
      send_message('getColor', GetColor_args)
    end

    def recv_getColor()
      result = receive_message(GetColor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getColor failed: unknown result')
    end

  end

  class Processor < ::Fridge::Processor 
    include ::Thrift::Processor

    def process_setColor(seqid, iprot, oprot)
      args = read_args(iprot, SetColor_args)
      result = SetColor_result.new()
      begin
        @handler.setColor(args.color)
      rescue ::BadColor => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'setColor', seqid)
    end

    def process_getColor(seqid, iprot, oprot)
      args = read_args(iprot, GetColor_args)
      result = GetColor_result.new()
      result.success = @handler.getColor()
      write_result(result, oprot, 'getColor', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class SetColor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COLOR = -1

    FIELDS = {
      COLOR => {:type => ::Thrift::Types::I32, :name => 'color', :enum_class => ::Color}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @color.nil? || ::Color::VALID_VALUES.include?(@color)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field color!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetColor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OUCH = 1

    FIELDS = {
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::BadColor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetColor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetColor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Color}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::Color::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

end

