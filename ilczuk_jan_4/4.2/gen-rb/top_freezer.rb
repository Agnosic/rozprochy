#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'fridge'
require 'top_freezer_types'

module TopFreezer
  class Client < ::Fridge::Client 
    include ::Thrift::Client

    def openFreezer()
      send_openFreezer()
      recv_openFreezer()
    end

    def send_openFreezer()
      send_message('openFreezer', OpenFreezer_args)
    end

    def recv_openFreezer()
      result = receive_message(OpenFreezer_result)
      return
    end

    def closeFreezer()
      send_closeFreezer()
      recv_closeFreezer()
    end

    def send_closeFreezer()
      send_message('closeFreezer', CloseFreezer_args)
    end

    def recv_closeFreezer()
      result = receive_message(CloseFreezer_result)
      return
    end

    def getFreezerStatus()
      send_getFreezerStatus()
      return recv_getFreezerStatus()
    end

    def send_getFreezerStatus()
      send_message('getFreezerStatus', GetFreezerStatus_args)
    end

    def recv_getFreezerStatus()
      result = receive_message(GetFreezerStatus_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFreezerStatus failed: unknown result')
    end

    def setFreezerTemperature(temperature)
      send_setFreezerTemperature(temperature)
      recv_setFreezerTemperature()
    end

    def send_setFreezerTemperature(temperature)
      send_message('setFreezerTemperature', SetFreezerTemperature_args, :temperature => temperature)
    end

    def recv_setFreezerTemperature()
      result = receive_message(SetFreezerTemperature_result)
      raise result.ouch unless result.ouch.nil?
      return
    end

    def getFreezerTemperature()
      send_getFreezerTemperature()
      return recv_getFreezerTemperature()
    end

    def send_getFreezerTemperature()
      send_message('getFreezerTemperature', GetFreezerTemperature_args)
    end

    def recv_getFreezerTemperature()
      result = receive_message(GetFreezerTemperature_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFreezerTemperature failed: unknown result')
    end

  end

  class Processor < ::Fridge::Processor 
    include ::Thrift::Processor

    def process_openFreezer(seqid, iprot, oprot)
      args = read_args(iprot, OpenFreezer_args)
      result = OpenFreezer_result.new()
      @handler.openFreezer()
      write_result(result, oprot, 'openFreezer', seqid)
    end

    def process_closeFreezer(seqid, iprot, oprot)
      args = read_args(iprot, CloseFreezer_args)
      result = CloseFreezer_result.new()
      @handler.closeFreezer()
      write_result(result, oprot, 'closeFreezer', seqid)
    end

    def process_getFreezerStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetFreezerStatus_args)
      result = GetFreezerStatus_result.new()
      result.success = @handler.getFreezerStatus()
      write_result(result, oprot, 'getFreezerStatus', seqid)
    end

    def process_setFreezerTemperature(seqid, iprot, oprot)
      args = read_args(iprot, SetFreezerTemperature_args)
      result = SetFreezerTemperature_result.new()
      begin
        @handler.setFreezerTemperature(args.temperature)
      rescue ::BadTemperature => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'setFreezerTemperature', seqid)
    end

    def process_getFreezerTemperature(seqid, iprot, oprot)
      args = read_args(iprot, GetFreezerTemperature_args)
      result = GetFreezerTemperature_result.new()
      result.success = @handler.getFreezerTemperature()
      write_result(result, oprot, 'getFreezerTemperature', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class OpenFreezer_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OpenFreezer_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseFreezer_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloseFreezer_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFreezerStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFreezerStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Status}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::Status::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetFreezerTemperature_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TEMPERATURE = -1

    FIELDS = {
      TEMPERATURE => {:type => ::Thrift::Types::DOUBLE, :name => 'temperature'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetFreezerTemperature_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OUCH = 1

    FIELDS = {
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::BadTemperature}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFreezerTemperature_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFreezerTemperature_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

