#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'camera'
require 'night_camera_types'

module NightCamera
  class Client < ::Camera::Client 
    include ::Thrift::Client

    def getNightvisionStatus()
      send_getNightvisionStatus()
      return recv_getNightvisionStatus()
    end

    def send_getNightvisionStatus()
      send_message('getNightvisionStatus', GetNightvisionStatus_args)
    end

    def recv_getNightvisionStatus()
      result = receive_message(GetNightvisionStatus_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNightvisionStatus failed: unknown result')
    end

    def turnOnNighvision()
      send_turnOnNighvision()
      recv_turnOnNighvision()
    end

    def send_turnOnNighvision()
      send_message('turnOnNighvision', TurnOnNighvision_args)
    end

    def recv_turnOnNighvision()
      result = receive_message(TurnOnNighvision_result)
      return
    end

    def turnOffNightvision()
      send_turnOffNightvision()
      recv_turnOffNightvision()
    end

    def send_turnOffNightvision()
      send_message('turnOffNightvision', TurnOffNightvision_args)
    end

    def recv_turnOffNightvision()
      result = receive_message(TurnOffNightvision_result)
      return
    end

  end

  class Processor < ::Camera::Processor 
    include ::Thrift::Processor

    def process_getNightvisionStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetNightvisionStatus_args)
      result = GetNightvisionStatus_result.new()
      result.success = @handler.getNightvisionStatus()
      write_result(result, oprot, 'getNightvisionStatus', seqid)
    end

    def process_turnOnNighvision(seqid, iprot, oprot)
      args = read_args(iprot, TurnOnNighvision_args)
      result = TurnOnNighvision_result.new()
      @handler.turnOnNighvision()
      write_result(result, oprot, 'turnOnNighvision', seqid)
    end

    def process_turnOffNightvision(seqid, iprot, oprot)
      args = read_args(iprot, TurnOffNightvision_args)
      result = TurnOffNightvision_result.new()
      @handler.turnOffNightvision()
      write_result(result, oprot, 'turnOffNightvision', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetNightvisionStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNightvisionStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::NightvisionStatus}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::NightvisionStatus::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TurnOnNighvision_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TurnOnNighvision_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TurnOffNightvision_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TurnOffNightvision_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

