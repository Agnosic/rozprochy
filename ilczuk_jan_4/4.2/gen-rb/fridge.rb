#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'device_service'
require 'fridge_types'

module Fridge
  class Client < ::DeviceService::Client 
    include ::Thrift::Client

    def setTemperature(temperature)
      send_setTemperature(temperature)
      recv_setTemperature()
    end

    def send_setTemperature(temperature)
      send_message('setTemperature', SetTemperature_args, :temperature => temperature)
    end

    def recv_setTemperature()
      result = receive_message(SetTemperature_result)
      raise result.ouch unless result.ouch.nil?
      return
    end

    def getTemperature()
      send_getTemperature()
      return recv_getTemperature()
    end

    def send_getTemperature()
      send_message('getTemperature', GetTemperature_args)
    end

    def recv_getTemperature()
      result = receive_message(GetTemperature_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTemperature failed: unknown result')
    end

    def open()
      send_open()
      recv_open()
    end

    def send_open()
      send_message('open', Open_args)
    end

    def recv_open()
      result = receive_message(Open_result)
      return
    end

    def close()
      send_close()
      recv_close()
    end

    def send_close()
      send_message('close', Close_args)
    end

    def recv_close()
      result = receive_message(Close_result)
      return
    end

    def getStatus()
      send_getStatus()
      return recv_getStatus()
    end

    def send_getStatus()
      send_message('getStatus', GetStatus_args)
    end

    def recv_getStatus()
      result = receive_message(GetStatus_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getStatus failed: unknown result')
    end

  end

  class Processor < ::DeviceService::Processor 
    include ::Thrift::Processor

    def process_setTemperature(seqid, iprot, oprot)
      args = read_args(iprot, SetTemperature_args)
      result = SetTemperature_result.new()
      begin
        @handler.setTemperature(args.temperature)
      rescue ::BadTemperature => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'setTemperature', seqid)
    end

    def process_getTemperature(seqid, iprot, oprot)
      args = read_args(iprot, GetTemperature_args)
      result = GetTemperature_result.new()
      result.success = @handler.getTemperature()
      write_result(result, oprot, 'getTemperature', seqid)
    end

    def process_open(seqid, iprot, oprot)
      args = read_args(iprot, Open_args)
      result = Open_result.new()
      @handler.open()
      write_result(result, oprot, 'open', seqid)
    end

    def process_close(seqid, iprot, oprot)
      args = read_args(iprot, Close_args)
      result = Close_result.new()
      @handler.close()
      write_result(result, oprot, 'close', seqid)
    end

    def process_getStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetStatus_args)
      result = GetStatus_result.new()
      result.success = @handler.getStatus()
      write_result(result, oprot, 'getStatus', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class SetTemperature_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TEMPERATURE = -1

    FIELDS = {
      TEMPERATURE => {:type => ::Thrift::Types::DOUBLE, :name => 'temperature'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetTemperature_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OUCH = 1

    FIELDS = {
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ::BadTemperature}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTemperature_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTemperature_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Open_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Open_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Close_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Status}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::Status::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

end

